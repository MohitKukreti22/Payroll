// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PayRoll.Contexts;

#nullable disable

namespace PayRoll.Migrations
{
    [DbContext(typeof(RequestTarkerContext))]
    [Migration("20240311051052_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PayRoll.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("PayRoll.Models.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTrailID"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("AuditTrailID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("PayRoll.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("BankDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AdminID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("PayRoll.Models.LeaveRequest", b =>
                {
                    b.Property<int>("LeaveRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveRequestID"), 1L, 1);

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeaveRequestID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ManagerID");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("PayRoll.Models.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("PayRoll.Models.Payroll", b =>
                {
                    b.Property<int>("PayrollID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayrollID"), 1L, 1);

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<double>("NetSalary")
                        .HasColumnType("float");

                    b.Property<int>("PayrollMonth")
                        .HasColumnType("int");

                    b.Property<int?>("PayrollProcessorID")
                        .HasColumnType("int");

                    b.Property<int>("PayrollYear")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalDeductions")
                        .HasColumnType("float");

                    b.Property<double>("TotalEarnings")
                        .HasColumnType("float");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PayrollID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("PayrollProcessorID");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("PayRoll.Models.PayrollPolicy", b =>
                {
                    b.Property<int>("PolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("ApplicableComponents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalculationFormula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolicyID");

                    b.HasIndex("AdminID");

                    b.ToTable("PayrollPolicies");
                });

            modelBuilder.Entity("PayRoll.Models.PayrollProcessor", b =>
                {
                    b.Property<int>("PayrollProcessorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayrollProcessorID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayrollProcessorID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("PayrollProcessors");
                });

            modelBuilder.Entity("PayRoll.Models.TimeSheet", b =>
                {
                    b.Property<int>("TimeSheetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSheetID"), 1L, 1);

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalHoursWorked")
                        .HasColumnType("float");

                    b.Property<DateTime>("WeekEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TimeSheetID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("PayRoll.Models.Validation", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Key")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Validations");
                });

            modelBuilder.Entity("PayRoll.Models.Admin", b =>
                {
                    b.HasOne("PayRoll.Models.Validation", "Validation")
                        .WithOne("Admin")
                        .HasForeignKey("PayRoll.Models.Admin", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("PayRoll.Models.AuditTrail", b =>
                {
                    b.HasOne("PayRoll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PayRoll.Models.Employee", b =>
                {
                    b.HasOne("PayRoll.Models.Admin", null)
                        .WithMany("Employee")
                        .HasForeignKey("AdminID");

                    b.HasOne("PayRoll.Models.Validation", "Validation")
                        .WithOne("Employee")
                        .HasForeignKey("PayRoll.Models.Employee", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("PayRoll.Models.LeaveRequest", b =>
                {
                    b.HasOne("PayRoll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PayRoll.Models.Manager", "Manager")
                        .WithMany("LeaveRequest")
                        .HasForeignKey("ManagerID");

                    b.Navigation("Employee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PayRoll.Models.Manager", b =>
                {
                    b.HasOne("PayRoll.Models.Validation", "Validation")
                        .WithOne("Manager")
                        .HasForeignKey("PayRoll.Models.Manager", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("PayRoll.Models.Payroll", b =>
                {
                    b.HasOne("PayRoll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("PayRoll.Models.Manager", null)
                        .WithMany("Payroll")
                        .HasForeignKey("ManagerID");

                    b.HasOne("PayRoll.Models.PayrollProcessor", "PayrollProcessor")
                        .WithMany("Payroll")
                        .HasForeignKey("PayrollProcessorID");

                    b.Navigation("Employee");

                    b.Navigation("PayrollProcessor");
                });

            modelBuilder.Entity("PayRoll.Models.PayrollPolicy", b =>
                {
                    b.HasOne("PayRoll.Models.Admin", "Admin")
                        .WithMany("PayrollPolicy")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("PayRoll.Models.PayrollProcessor", b =>
                {
                    b.HasOne("PayRoll.Models.Validation", "Validation")
                        .WithOne("PayrollProcessor")
                        .HasForeignKey("PayRoll.Models.PayrollProcessor", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("PayRoll.Models.TimeSheet", b =>
                {
                    b.HasOne("PayRoll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PayRoll.Models.Admin", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("PayrollPolicy");
                });

            modelBuilder.Entity("PayRoll.Models.Manager", b =>
                {
                    b.Navigation("LeaveRequest");

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("PayRoll.Models.PayrollProcessor", b =>
                {
                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("PayRoll.Models.Validation", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("PayrollProcessor");
                });
#pragma warning restore 612, 618
        }
    }
}
